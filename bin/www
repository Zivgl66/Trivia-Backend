#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
const app = require("../app");
const debug = require("debug")("nodejs-project:server");
const http = require("http");
const chalk = require("chalk");
const connectToDb = require("./connectToDB");
// let socketapi = require("../socketServer");
let server;
let room;
let leaderboard;
let players = [];

const addPlayer = (user, socketId) => {
  console.log(user);
  !players.some((player) => player.socketId === socketId) &&
    players.push({
      guestId: user._id,
      guestName: user.guestName,
      guestPicture: user.guestPicture,
      socketId,
    });
};
const getPlayer = (socketId) => {
  return players.find((player) => player.socketId === socketId);
};
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

connectToDb
  .then(() => {
    console.log(chalk.blueBright("connected to db"));
    server = http.createServer(app);
    const io = require("socket.io")(server, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"],
        Credentials: false,
        allowedHeaders: ["*"],
      },
    });
    io.on("connection", async (socket) => {
      console.log("SOCKET SERVER CONNECTION");
      socket.on("disconnect", (reason) => {
        console.log("Socket " + socket.id + " was disconnected");
        console.log(reason);
      });

      // start a game with host
      socket.on("init-game", (data) => {
        console.log("init game!!");
        room = JSON.parse(JSON.stringify(data.room));
        console.log("room: " + room);
        // leaderboard = JSON.parse(JSON.stringify(newLeaderboard));
        socket.join(room.roomCode);
        hostId = socket.id;
        console.log(
          "Host with id " +
            socket.id +
            " started game and joined room: " +
            room.roomCode
        );
      });

      // add a player to scoket array
      socket.on("add-player", ({ user, socketId }) => {
        addPlayer(user, socketId);
        // cb("correct", user._id, room._id);
        socket.join(room.roomCode);
        console.log(
          "player " +
            user.guestName +
            " with id " +
            socket.id +
            " joined room " +
            room.roomCode
        );
        let player = getPlayer(socketId);
        io.emit("player-added", player);
      });

      // start the game for everybody connected to the socket
      socket.on("start-game", (game) => {
        game = JSON.parse(JSON.stringify(game));
        console.log("Move players to game");
        console.log(room.roomCode);
        socket.to(room.roomCode).emit("move-to-game-page", room._id);
      });
    });

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  })
  .catch((err) => {
    console.log(err);
    process.exit(1);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + chalk.green.bold(bind));
  debug("Listening on " + bind);
}
